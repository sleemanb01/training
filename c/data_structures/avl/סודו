create:
    like iterative
    
destroy:
    go to leaf and remove leaf
    
    if not leaf wait for to be leaf - remove

remove:
    if leaf:
        remove and change parent's children to NULL
    if left child:
        move data of left child to this node and free left child
        
    if right child:
        move data of right child to this node and free right child
    
    if both children:
        go to left one time and right to the end node and swap between them
        and remove the "next"

insert:
    find place like in iterative
    
    update height for nodes then returns

height:
    run to root(if exists) and get height
    else return 0

size:
    if leaf return 1
    add 1 to previus returns(1 or 2) and return

is_empty:
    no childrens for dummy
    
find:
    run down like in insert
    if compare func returned 0 - return data
    else return NULL
    
foreach:
    run to leafs - (pre\in\post), do action, return

